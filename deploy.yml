AWSTemplateFormatVersion: 2010-09-09
Description: Create a database, task, service, and ELB for this project
Parameters:
  Cluster:
    Description: The name of the cluster where we should deploy
    Type: String
    Default: stage
  DBPassword:
     Description: The database password
     Type: String
     Default: emcitemcit

Resources:
  # Create a logs group for our app
  LogGroup: 
     Type: "AWS::Logs::LogGroup"
     Properties: 
       LogGroupName: !Ref AWS::StackName
       RetentionInDays: 7

  # An ELB that we can expose our service on
  ELB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref AWS::StackName
      Scheme: internet-facing
      Type: application
      Subnets:
        - Fn::ImportValue: !Sub "${Cluster}:PublicSubnetOne"
        - Fn::ImportValue: !Sub "${Cluster}:PublicSubnetTwo"
      SecurityGroups:
         - Fn::ImportValue: !Sub "${Cluster}:PublicELBSecGroup"
      Tags:
         - Key: Name
           Value: !Ref AWS::StackName

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'AWS::StackName'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: 
        Fn::ImportValue: !Sub "${Cluster}:VPCId"

  # Create a rule on the load balancer for routing traffic to the target group
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'ELBTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: HTTP

  # Create Postgres RDS instance with security groups
  PostgresDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    DependsOn:
    - DbSubnetGroup
    - DBSecurityGroup
    Properties:
      Engine: postgres
      DBName: emcit
      MasterUsername: "emcit"
      DBInstanceClass: "db.t2.micro"
      PubliclyAccessible: 'false'
      DBSubnetGroupName:
        Ref: DbSubnetGroup
      VPCSecurityGroups:
      - Ref: DBSecurityGroup
      AllocatedStorage: "5"
      MasterUserPassword: !Ref DBPassword

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      VpcId: 
        Fn::ImportValue: !Sub "${Cluster}:VPCId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: 0.0.0.0/0

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'RDS Subnet Group for emcit database'
      SubnetIds:
      - Fn::ImportValue: !Sub "${Cluster}:PrivateSubnetOne"
      - Fn::ImportValue: !Sub "${Cluster}:PrivateSubnetTwo"

  # IAM Role for task
  TaskRole:
    Type: AWS::IAM::Role
    DependsOn: S3Bucket
    Properties:
      RoleName: !Sub "emerald-citizen-task-${Cluster}"
      Path: /
      AssumeRolePolicyDocument:
        Statement: 
          Effect: Allow
          Principal: 
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies: 
        - PolicyName: !Sub "emerald-citizen-task-${Cluster}"
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action: 
              - s3:*
              Resource:
              - !Sub "${S3Bucket.Arn}/*"

  # The task definition that says what container to run, what resources it needs, etc.
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn: TaskRole
    Properties:
      ContainerDefinitions:
        - Name: emerald-citizen
          Image: !Sub
            - 937163516619.dkr.ecr.us-west-2.amazonaws.com/emerald-citizen:${Cluster}
            - { cluster: !Ref Cluster }
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          Essential: 'true'
          LogConfiguration:
             LogDriver: awslogs
             Options:
                awslogs-group: !Ref AWS::StackName
                awslogs-region: us-west-2
                awslogs-stream-prefix: emerald-citizen
          Environment:
            - Name: DATABASE_HOST
              Value: !GetAtt PostgresDB.Endpoint.Address
            - Name: DATABASE_PASSWORD
              Value: !Ref DBPassword
            - Name: NODE_ENV
              Value: production
      Cpu: '256'
      Memory: '512'
      Family: !Ref AWS::StackName
      NetworkMode: awsvpc
      RequiresCompatibilities:
         - FARGATE
      ExecutionRoleArn:
         Fn::ImportValue: !Sub "${Cluster}:ECSTaskRole"
      TaskRoleArn: !Ref TaskRole

  # A service which says how many copies of our task to run, etc.
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn: ELBListener
    Properties:
      ServiceName: !Ref AWS::StackName
      LaunchType: FARGATE
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt 'DBSecurityGroup.GroupId'
            - Fn::ImportValue: !Sub "${Cluster}:ContainerSecGroup"
          Subnets:
             - Fn::ImportValue: !Sub "${Cluster}:PrivateSubnetOne"
             - Fn::ImportValue: !Sub "${Cluster}:PrivateSubnetTwo"
      LoadBalancers:
        - ContainerName: emerald-citizen
          ContainerPort: 8080
          TargetGroupArn: !Ref ELBTargetGroup
      TaskDefinition: !Ref TaskDefinition

  # S3 bucket for file storage
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "emerald-citizen-files-${Cluster}"
      CorsConfiguration:
        CorsRules:
        - AllowedMethods:
            - POST
            - GET
          AllowedOrigins:
            - "*"
          AllowedHeaders:
            - "content-type"
            - "csrf-token"