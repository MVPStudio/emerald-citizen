version: 2
jobs:
  build:
    docker:
      - image: circleci/node:10
      - image: circleci/postgres:9-alpine-ram
        environment:
          POSTGRES_USER: emcit
    steps:
      - checkout
      - run: yarn build
      - persist_to_workspace:
          root: ./
          # must include anything needed by the Dockerfile, mvpstudio.yml, .git, and kube folder
          paths:
            - build
            - mvpstudio.yml
            - .git
            - kube

  publish:
    docker:
      - image: circleci/python:3
    steps:
      - attach_workspace:
          at: ./build-output
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            git clone -b test https://github.com/MVPStudio/build_setup.git
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            sudo pip install pyyaml
            ls -l
            cd ./build-output
            ls -l
            python ../build_setup/build_tag_push.py mvpstudio ./mvpstudio.yml

  deploy:
    docker:
      - image: google/cloud-sdk:slim
    steps:
      - attach_workspace:
          at: ./build-output
      - run: 
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ./gcloud-service-key.json
            gcloud auth activate-service-account --key-file=./gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}      
            kubectl apply -f ./build-output/kube
            # TODO: it would be cool to parse all the yaml files, find all the deployments, and report rollout status
    
workflows:
  version: 2
  my-workflow:
    jobs:
      - build
      - publish:
          context: dockerhub-publish
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy:
          context: k8-deploy
          requires:
            - publish
          filters:
            branches:
              only: master